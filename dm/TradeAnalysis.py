

def printTradeAnalysis(analyzer):
    '''
    Function to print the Technical Analysis results in a nice format.
    Provides statistics on closed trades(keeps also the count of open ones)

    Total Open/Closed Trades
    Streak Won/Lost Current/Longest
    ProfitAndLoss Total/Average
    Won/Lost Count/Total PN/Average PNL/Max PNL
    Long/Short Count/Total PNL/Average PNL/Max PNL

    Length(bars in the market)

    Total/Average/Max/Min
    Won/Lost Total/Average/Max/Min
    Long/Short Total/Average/Max/Min
        Won/Lost Total/Average/Max/Min

    Get the results we are interested in
    '''
    total_open = analyzer.total.open
    total_closed = analyzer.total.closed
    total_won = analyzer.won.total
    total_lost = analyzer.lost.total
    win_streak = analyzer.streak.won.longest
    lose_streak = analyzer.streak.lost.longest
    pnl_net = round(analyzer.pnl.net.total, 2)
    strike_rate = round((total_won / total_closed) * 100, 3)
    # Designate the rows
    h1 = ['Total Open', 'Total Closed', 'Total Won', 'Total Lost']
    h2 = ['Strike Rate', 'Win Streak', 'Losing Streak', 'PnL Net']
    r1 = [total_open, total_closed, total_won, total_lost]
    r2 = [strike_rate, win_streak, lose_streak, pnl_net]
    # Check which set of headers is the longest.
    if len(h1) > len(h2):
        header_length = len(h1)
    else:
        header_length = len(h2)
    # Print the rows
    print_list = [h1, r1, h2, r2]
    row_format = "{:<15}" * (header_length + 1)
    print("Trade Analysis Results:")
    for row in print_list:
        print(row_format.format('', *row))

def RecordResults(StrategyResults, cerebro, BacktestParms, Results_df):
    # printTradeAnalysis(StrategyResults.analyzers.ta.get_analysis())
    # SQN
    # SQN measures the relationship between the mean (expectancy) and the 
    # standard deviation of the R-multiple distribution generated by a trading 
    # system. It also makes an adjustment for the number of trades involved.
    #
    # For more information see: http://www.vantharp.com/tharp-concepts/sqn.asp
    #
    # 1.6 - 1.9 Below average
    # 2.0 - 2.4 Average
    # 2.5 - 2.9 Good
    # 3.0 - 5.0 Excellent
    # 5.1 - 6.9 Superb
    # 7.0 - Holy     Grail?
    sqn = round(StrategyResults.analyzers.sqn.get_analysis().sqn, 2)
    sharpe_analysis = StrategyResults.analyzers.sharpe_annual.get_analysis()
    # print('SharpeRatio_A = ', round(sharpe_analysis['sharperatio'],2))
    # Returns
    ret_analysis = StrategyResults.analyzers.returns.get_analysis()
    #total_compound_ret = round(ret_analysis['rtot'], 3)
    annual_ret_per = round(ret_analysis['rnorm100'], 3)

    # Drawdown
    draw_analysis = StrategyResults.analyzers.drawdwn.get_analysis()
    draw_dwn_per = round(draw_analysis.drawdown, 3)
    draw_dwn_days = round(draw_analysis.len, 3)
    max_draw_dwn_per = round(draw_analysis.max.drawdown, 3)
    max_draw_dwn_days = round(draw_analysis.max.len, 3)

    #Trade Analysis
    ta_analysis = StrategyResults.analyzers.ta.get_analysis()
    
    try:
        total_open = ta_analysis.total.open        # sometimes this throws a key error.  Not sure why
    except:
        print("No results")
        # Results_df.loc[BacktestParms.iteration, 'TimeDesc'] = "Error running strategy"
        # return Results_df
    else:
        # total_closed = ta_analysis.total.closed   # sometimes this throws a key error.  Not sure why   
        total_closed = 'N/A'
        total_won = ta_analysis.won.total
        total_lost = ta_analysis.lost.total
        win_streak = ta_analysis.streak.won.longest
        lose_streak = ta_analysis.streak.lost.longest
        pnl_net = round(ta_analysis.pnl.net.total, 2)
        strike_rate = round(total_won / (total_won + total_lost) * 100, 1)
        avgwindol = round(ta_analysis.won.pnl.average, 1)
        maxwindol = round(ta_analysis.won.pnl.max, 1)
        avglossdol = round(ta_analysis.lost.pnl.average, 1)
        maxlossdol = round(ta_analysis.lost.pnl.max, 1)
        GrossProfit = round(ta_analysis.won.pnl.total, 1)
        GrossLoss = round(ta_analysis.lost.pnl.total, 1)
        if GrossLoss == 0:
            ProfitFactor = 0
        else:
            ProfitFactor = round(GrossProfit / -GrossLoss, 3)
        if str(BacktestParms.strategy).find("Pred")>=0:
            PredType = "Pred"
        else:
            PredType = "NoPred"
        if str(BacktestParms.strategy).find("CoveredCall")>=0:
            StratType = "CoveredCall"
        elif str(BacktestParms.strategy).find("Whale")>=0:
            StratType = "WhaleWisdom"
        else:
            StratType = "StkBuySell"
        # Add results to the table
        Results_df.loc[BacktestParms.iteration, 'TimeDesc'] = BacktestParms.btTimeDesc
        Results_df.loc[BacktestParms.iteration, 'btstart'] = BacktestParms.btstart
        Results_df.loc[BacktestParms.iteration, 'btend'] = BacktestParms.btend
        Results_df.loc[BacktestParms.iteration, 'PredType'] = PredType
        Results_df.loc[BacktestParms.iteration, 'StratType'] = StratType
        Results_df.loc[BacktestParms.iteration, 'Tckr'] = BacktestParms.stock_tckr
        Results_df.loc[BacktestParms.iteration, 'Strategy'] = BacktestParms.strategy
        Results_df.loc[BacktestParms.iteration, 'Profit Factor'] = ProfitFactor
        Results_df.loc[BacktestParms.iteration, 'SQN'] = sqn
        Results_df.loc[BacktestParms.iteration, 'Final Value'] = cerebro.broker.getvalue()
        Results_df.loc[BacktestParms.iteration, 'PNL_Net'] = pnl_net
        Results_df.loc[BacktestParms.iteration, 'Annual_Ret%'] = annual_ret_per
        Results_df.loc[BacktestParms.iteration, 'WinLoss%'] = strike_rate
        Results_df.loc[BacktestParms.iteration, 'Total Open'] = total_open
        Results_df.loc[BacktestParms.iteration, 'Total Closed'] = total_closed
        Results_df.loc[BacktestParms.iteration, 'Total Won'] = total_won
        Results_df.loc[BacktestParms.iteration, 'Total Lost'] = total_lost
        Results_df.loc[BacktestParms.iteration, 'Avg Win$'] = avgwindol
        Results_df.loc[BacktestParms.iteration, 'Max Win$'] = maxwindol
        Results_df.loc[BacktestParms.iteration, 'Avg Loss$'] = avglossdol
        Results_df.loc[BacktestParms.iteration, 'Max Loss$'] = maxlossdol
        Results_df.loc[BacktestParms.iteration, 'DrawDown%'] = draw_dwn_per
        Results_df.loc[BacktestParms.iteration, 'DrawDownDays'] = draw_dwn_days
        Results_df.loc[BacktestParms.iteration, 'MaxDrawDwn%'] = max_draw_dwn_per
        Results_df.loc[BacktestParms.iteration, 'MaxDrawDwnDays'] = max_draw_dwn_days
        Results_df.loc[BacktestParms.iteration, 'TradeWindowStartDate'] = BacktestParms.TradeWindowStartDate.strftime('%m/%d/%Y')
        Results_df.loc[BacktestParms.iteration, 'TradeWindowEndDate'] = BacktestParms.TradeWindowEndDate.strftime('%m/%d/%Y')

        # Designate the rows
        h1 = ['Tckr', 'Profit Factor', 'SQN', 'PNL_Net', 'Final Value', 'Annual_Ret%', 'WinLoss%', '']
        h2 = ['Total Open', 'Total Closed', 'Total Won', 'Total Lost', 'Avg Win$', 'Max Win$', 'Avg Loss$', 'Max Loss$']
        h3 = ['DrawDown%', 'DrawDownDays', 'MaxDrawDwn%', 'MaxDrawDwnDays', '', '', '', '']
        r1 = [BacktestParms.stock_tckr, ProfitFactor, sqn, pnl_net, cerebro.broker.getvalue(), annual_ret_per, strike_rate,
              '']
        r2 = [total_open, total_closed, total_won, total_lost, avgwindol, maxwindol, avglossdol, maxlossdol]
        r3 = [draw_dwn_per, draw_dwn_days, max_draw_dwn_per, max_draw_dwn_days, '', '', '', '']
        header_length = len(h1)
        # Print the rows
        print_list = [h1, r1, h2, r2, h3, r3]
        row_format = "{:<15}" * (header_length + 1)
        print("Trade Analysis Results:", )
        for row in print_list:
            print(row_format.format('', *row))

    return Results_df
